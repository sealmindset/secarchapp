import React, { useState } from 'react';
import './App.css';
import Modal from './Modal';
import SaveButton from './SaveButton';
import LoadButton from './LoadButton';
import PrintButton from './PrintButton';
import ImageUpload from './ImageUpload';
import questions from './questions';
import FormattedAnswer from './FormattedAnswer';
import 'react-quill/dist/quill.snow.css';

function App() {
  const [answers, setAnswers] = useState({});
  const [image, setImage] = useState(null);
  const [currentModalQuestionIndex, setCurrentModalQuestionIndex] = useState(null);

  const openModal = (index) => {
    setCurrentModalQuestionIndex(index); // Update modal question index
  };

  const closeModal = () => {
    setCurrentModalQuestionIndex(null);
  };

  const saveAnswer = (editorContent) => {
    if (currentModalQuestionIndex !== null) {
      setAnswers((prev) => ({
        ...prev,
        [currentModalQuestionIndex]: editorContent,
      }));
      closeModal();
    }
  };

  return (
    <div className="app">
      {image && <img src={image} alt="Uploaded" className="uploaded-image" />}
      <div className="formatted-answers">
        {questions.map((question, index) => (
          <FormattedAnswer
            key={index}
            question={question}
            content={answers[index]} // Pass answer content to FormattedAnswer
            onClick={() => openModal(index)}
          />
        ))}
      </div>
      <div className="buttons">
        <SaveButton data={answers} image={image} />
        <LoadButton setData={setAnswers} setImage={setImage} />
        <PrintButton />
        <ImageUpload setImage={setImage} />
      </div>
      <Modal
        isOpen={currentModalQuestionIndex !== null}
        onClose={closeModal}
        onSave={saveAnswer}
        initialAnswer={answers[currentModalQuestionIndex] || ''} // Initialize with empty string
      >
        <h2>{questions[currentModalQuestionIndex]?.header}</h2>
        <p>{questions[currentModalQuestionIndex]?.detail}</p>
      </Modal>
    </div>
  );
}

export default App;

/* Global Styles */
body {
    font-family: 'Arial', sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

.app {
    max-width: 800px;
    margin: 50px auto;
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.buttons {
    margin-top: 20px;
    display: flex;
    gap: 10px;
}

/* Question Component Styles */
.question {
    margin-bottom: 20px;
}

.question label {
    display: block;
    margin-bottom: 8px;
    color: #333;
    font-weight: 600;
}

.question input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 16px;
    transition: border 0.3s ease;
}

.question input:focus {
    border-color: #007BFF;
    outline: none;
    box-shadow: 0 0 5px rgba(0, 123, 255, 0.5);
}

/* Button Styles */
button {
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    font-size: 16px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    opacity: 0.9;
}

/* Save and Load Button Styles */
button + button {
    margin-left: 10px;
}

.SaveButton {
    background-color: #007BFF;
    color: #fff;
}

.LoadButton {
    background-color: #28a745;
    color: #fff;
}

.print-hide {
    display: none !important;
}
  
.uploaded-image {
    max-width: 100%;
    height: auto;
    margin-bottom: 20px;
}

.answer-textarea {
    width: 100%;
    padding: 10px;
    border: none;
    background-color: #f4f4f4;
    margin-top: 5px;
    resize: none; /* Disables the resize handle */
    cursor: pointer; /* Indicates it's clickable */
}
// ImageUpload.jsx
function ImageUpload({ setImage }) {
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setImage(reader.result);
      };
      reader.readAsDataURL(file);
    }
  };

  return <input type="file" accept="image/png" onChange={handleImageChange} />;
}

export default ImageUpload;

// LoadButton.jsx
import ReactFileReader from 'react-file-reader';

function LoadButton({ setData, setImage }) {
  const handleLoad = (files) => {
    const file = files[0];
    const reader = new FileReader();
    reader.onload = (e) => {
      const data = JSON.parse(e.target.result);
      if (data.image) {
        setImage(data.image);
        delete data.image; // Remove the image data before setting the answers
      }
      setData(data);
    };
    reader.readAsText(file);
  };

  return (
    <ReactFileReader handleFiles={handleLoad} fileTypes={['.json']}>
      <button>Load</button>
    </ReactFileReader>
  );
}

export default LoadButton;

// SaveButton.jsx
import { saveAs } from 'file-saver';

function SaveButton({ data, image }) {
  const handleSave = () => {
    const blob = new Blob([JSON.stringify({ ...data, image }, null, 2)], { type: 'application/json' });
    saveAs(blob, 'data.json');
  };

  return <button onClick={handleSave}>Save</button>;
}

export default SaveButton;

import React, { useState, useEffect } from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import './Modal.css';

function Modal({ isOpen, onClose, onSave, children, initialAnswer }) {
  const [editorContent, setEditorContent] = useState('');

  useEffect(() => {
    // Update editor content when initialAnswer changes
    setEditorContent(initialAnswer || '');

    // Clear editor content when the modal opens with no initial answer
    if (isOpen && !initialAnswer) {
      setEditorContent('');
    }
  }, [isOpen, initialAnswer]);

  if (!isOpen) return null;

  const handleSave = () => {
    onSave(editorContent);
    onClose();
  };

  return (
    <div className="modal-overlay">
      <div className="modal-content">
        {children}
        <p>Answer:</p>
        <ReactQuill
          value={editorContent}
          onChange={setEditorContent}
          className="modal-quill-editor"
        />
        <div className="modal-actions">
          <button onClick={onClose}>Cancel</button>
          <button onClick={handleSave}>OK</button>
        </div>
      </div>
    </div>
  );
}

export default Modal;

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-color: rgba(0, 0, 0, 0.5);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.modal-content {
  background-color: #ffffff;
  padding: 20px;
  border-radius: 8px;
  width: 80%;
  max-width: 500px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.modal {
  background-color: #fff;
  padding: 20px;
  border-radius: 8px;
  width: 80%;
  max-width: 500px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.modal h2 {
  margin-top: 0;
}

.modal textarea {
  width: 100%;
  height: 150px;
  margin: 10px 0;
  padding: 10px;
  border: 1px solid #ddd;
  border-radius: 4px;
  resize: vertical;
  font-size: 16px;
}

.modal-actions {
  display: flex;
  justify-content: flex-end;
  gap: 10px;
}

.modal-actions button + button {
  margin-left: 10px;
}

/* Add styling for the rich text editor */
.modal-quill-editor {
  border: 1px solid #ddd;
  border-radius: 4px;
  margin: 10px 0;
  height: 200px;
}

// PrintButton.jsx
import html2pdf from 'html2pdf.js';

function PrintButton() {
  const handlePrint = () => {
    // Hide the buttons
    const buttonsContainer = document.querySelector('.buttons');
    buttonsContainer.classList.add('print-hide');

    const content = document.querySelector('.app');
    const opt = {
      margin: 10,
      filename: 'SecurityReport.pdf',
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2 },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' }
    };

    html2pdf().from(content).set(opt).save().then(() => {
      // Show the buttons again after saving the PDF
      buttonsContainer.classList.remove('print-hide');
    });
  };

  return <button onClick={handlePrint}>Print as PDF</button>;
}

export default PrintButton;

// Question.js
import React from 'react';

function Question({ index, question, answer, onClick }) {
  return (
    <div className="question">
      <label>{question.header}:</label>
      <textarea
        readOnly
        value={answer}
        onClick={() => onClick(index)}
        className="answer-textarea"
      />
    </div>
  );
}

export default Question;

  const questions = [
    {
      header: "Diagram",
      detail: "Add a diagram",
      type: "image"
    },
    {
      header: "Project/Task Name",
      detail: "What is the name or title of the project or task you worked on this week?"
    },
    {
      header: "Objective",
      detail: "What was the primary goal or objective of this project/task?"
    },
    {
      header: "Proposed Architecture Details",
      detail: "Can you provide a brief overview of the proposed architecture?"
    },
    {
      header: "Data Classification",
      detail: "What are the data topics and their respective classifications that the project will handle?"
    },
    {
      header: "Threat Analysis",
      detail: "Based on the proposed architecture and data classification, what potential threats have you identified?"
    },
    {
      header: "Security Specifications",
      detail: "What specific safeguards or security measures have you recommended to mitigate the identified threats?"
    },
    {
      header: "Gap Analysis",
      detail: "Were there any gaps between the proposed security specifications and existing security controls? If so, what alternatives did you suggest?"
    },
    {
      header: "Security Exceptions",
      detail: "Did you have to submit any information security policy & standards exceptions this week? If so, what were the reasons?"
    },
    {
      header: "Penetration Tests & Assessments",
      detail: "Were any penetration tests or security assessments conducted? What were the outcomes?"
    },
    {
      header: "Collaborations",
      detail: "Did you collaborate with any Solution Architects, DevOps Teams, or other stakeholders? If so, what was the nature of the collaboration?"
    },
    {
      header: "Impact",
      detail: "How does your security review align with the company's goals or objectives? What potential impact does it have on ensuring a safe and consistent customer experience?"
    },
    {
      header: "Next Steps",
      detail: "What are the upcoming tasks or milestones related to this project/initiative?"
    }
  ];

  export default questions;
import React from 'react';
import ReactQuill from 'react-quill';
import 'react-quill/dist/quill.snow.css';
import './FormattedAnswer.css';

function FormattedAnswer({ question, content, onClick }) {
  return (
    <div className="formatted-answer" onClick={() => onClick()}>
      <h3>{question.header}</h3>
      <div className="modal-quill-editor">
        <ReactQuill
          value={content || ''} // Use content as the initial value
          readOnly={true}
          theme={null}
        />
      </div>
    </div>
  );
}

export default FormattedAnswer;

/* FormattedAnswer.css */

.formatted-answer {
  border: 1px solid #ddd;
  border-radius: 4px;
  padding: 10px;
  margin-top: 5px;
  background-color: #f4f4f4;
  cursor: pointer;
}

/* Additional styles to make the editor look more like a textarea */
.ql-editor {
  min-height: 300px;
  height: auto;
  overflow-y: auto;
  border: none;
  padding: 0;
}

